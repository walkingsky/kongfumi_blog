<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>openwrt设置旁路由实例</title>
      <link href="/2022/03/13/openwrt%E8%AE%BE%E7%BD%AE%E6%97%81%E8%B7%AF%E7%94%B1%E5%AE%9E%E4%BE%8B/"/>
      <url>/2022/03/13/openwrt%E8%AE%BE%E7%BD%AE%E6%97%81%E8%B7%AF%E7%94%B1%E5%AE%9E%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="OpenWrt旁路由设置实例"><a href="#OpenWrt旁路由设置实例" class="headerlink" title="OpenWrt旁路由设置实例"></a>OpenWrt旁路由设置实例</h1><p>转载自：<a href="https://pfschina.org/wp/?p=8031">https://pfschina.org/wp/?p=8031</a></p><p>在主路由和旁路由的搭配中，主路由负责上网和NAT转发的，旁路由起到的是网关的作用，可以用来分流数据和扩展插件。严格来说应该是旁路网关或网关服务器，它的核心是网关而不是路由。</p><p>在使用pfSense或OPNsense防火墙的网络环境中，如果有访问外网等需求时，可以通过设置OpenWrt作为旁路由来实现。</p><p><img src="https://cdn.jsdelivr.net/gh/walkingsky/pic@main/blog/Jietu20211229-100144.jpg" alt="Jietu20211229-100144"></p><p>使用OpenWrt作为旁路由，要注意以下几点：</p><ul><li>旁路由必须与主路由在同一网段，旁路由的LAN接口接入主路由的LAN网络。</li><li>旁路由的网关设置为防火墙的LAN接口地址</li><li>防火墙开启IP动态伪装</li><li>DHCP设在主路由上，需要使用旁路网关的设备手动指定网关为旁路由的LAN接口地址。如果需要旁路由完全接管，则DHCP的默认网关设为旁路由LAN接口地址即可。</li></ul><p>下面介绍在OpenWrt上的详细设置步骤。</p><h1 id="添加LAN接口网关"><a href="#添加LAN接口网关" class="headerlink" title="添加LAN接口网关"></a>添加LAN接口网关</h1><p>导航到网络&gt;接口&gt;LAN，添加LAN接口网关和DNS。IPv4网关填写主路由的LAN接口地址，DNS填写公共DNS。</p><p><img src="https://cdn.jsdelivr.net/gh/walkingsky/pic@main/blog/Jietu20211229-100843.jpg"></p><h1 id="禁用LAN接口DHCP"><a href="#禁用LAN接口DHCP" class="headerlink" title="禁用LAN接口DHCP"></a>禁用LAN接口DHCP</h1><p><img src="https://cdn.jsdelivr.net/gh/walkingsky/pic@main/blog/Jietu20211229-101650.jpg" alt="Jietu20211229-101650"></p><h1 id="删除WAN接口"><a href="#删除WAN接口" class="headerlink" title="删除WAN接口"></a>删除WAN接口</h1><p>导航到网络&gt;接口，删除WAN接口。</p><p><img src="https://cdn.jsdelivr.net/gh/walkingsky/pic@main/blog/Jietu20211229-101416.jpg" alt="Jietu20211229-101416"></p><h1 id="修改防火墙设置"><a href="#修改防火墙设置" class="headerlink" title="修改防火墙设置"></a>修改防火墙设置</h1><p>导航到网络&gt;防火墙，取消选中启用SYN-flood 防御，选中LAN接口的IP动态伪装，如下图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/walkingsky/pic@main/blog/Jietu20211229-101956.jpg" alt="Jietu20211229-101956"></p><p>至此，OperWrt旁路由的设置就完成了。</p><p>客户端如果要使用OpenWrt旁路由上网，必须在客户端设备上手动设定IP地址，并指定网关为OpenWrt的接口地址。如果想让旁路由完全接管，可以在主路由的DHCP设置中，手动指定网关为OpenWrt的接口地址，客户端就可以自动获取旁路由网关地址。下图所示为pfSense中DHCP的旁路由网关设置：</p><p><img src="https://cdn.jsdelivr.net/gh/walkingsky/pic@main/blog/Jietu20211229-102438.jpg" alt="Jietu20211229-102438"></p>]]></content>
      
      
      
        <tags>
            
            <tag> openwrt </tag>
            
            <tag> 旁路由 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>申请了amazon EC2 免费一年主机，我用他干了啥</title>
      <link href="/2022/03/05/%E7%94%B3%E8%AF%B7%E4%BA%86amazon-EC2-%E5%85%8D%E8%B4%B9%E4%B8%80%E5%B9%B4%E4%B8%BB%E6%9C%BA%EF%BC%8C%E6%88%91%E7%94%A8%E4%BB%96%E5%B9%B2%E4%BA%86%E5%95%A5/"/>
      <url>/2022/03/05/%E7%94%B3%E8%AF%B7%E4%BA%86amazon-EC2-%E5%85%8D%E8%B4%B9%E4%B8%80%E5%B9%B4%E4%B8%BB%E6%9C%BA%EF%BC%8C%E6%88%91%E7%94%A8%E4%BB%96%E5%B9%B2%E4%BA%86%E5%95%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="申请了amazon-EC2-免费一年主机，我用他干了啥"><a href="#申请了amazon-EC2-免费一年主机，我用他干了啥" class="headerlink" title="申请了amazon EC2 免费一年主机，我用他干了啥?"></a>申请了amazon EC2 免费一年主机，我用他干了啥?</h1><p><a href="https://aws.amazon.com/">https://aws.amazon.com</a></p><h4 id="安装trojan"><a href="#安装trojan" class="headerlink" title="安装trojan"></a>安装trojan</h4><p>参考：<a href="https://iyideng.win/black-technology/cgfw/trojan-server-building-and-using-tutorial.html">https://iyideng.win/black-technology/cgfw/trojan-server-building-and-using-tutorial.html</a></p><ul><li><p>附带安装了nignx，mariadb（mysql）</p></li><li><p>配置命令：</p><ul><li>trojan</li><li>或者 <a href="https://app.yourdomain.com/">https://app.yourdomain.com</a></li></ul></li></ul><h4 id="安装-pythonstock"><a href="#安装-pythonstock" class="headerlink" title="安装 pythonstock"></a>安装 pythonstock</h4><p>参考：<a href="https://github.com/pythonstock/stock">https://github.com/pythonstock/stock</a></p><p>因为 mariadb已经装好，所以不需要再次安装，直接配置pythonstock的docker启动就好（<strong>MYSQL_HOST参数配置错误。后面费了好大的周折才修复回来。应当配置为 MYSQL_HOST=172.17.0.2  ，mysql容器的ip</strong>）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd --name stock  \</span><br><span class="line">    -v /data/notebooks:/data/notebooks \</span><br><span class="line">    -p 8888:8888 \</span><br><span class="line">    -p 9999:9999 \</span><br><span class="line">    -e MYSQL_HOST=127.0.0.1 \</span><br><span class="line">    -e MYSQL_USER=root \</span><br><span class="line">    -e MYSQL_PWD=RTWhN \</span><br><span class="line">    -e MYSQL_DB=stock_data \</span><br><span class="line">    pythonstock/pythonstock:latest</span><br></pre></td></tr></table></figure><p>安装好后，登录进入容器shell</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it a562 bash</span><br><span class="line">sh /data/stock/jobs/cron.daily/run_daily</span><br></pre></td></tr></table></figure><p>执行后提示数据库连接不上。查看trojan的安装配置，发现mysql的端口设置为 31220（<strong>这个端口是映射个外部宿主的，不能在容器之间访问</strong>）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/etc/trojan/</span><br><span class="line"><span class="built_in">cat</span> config.json</span><br></pre></td></tr></table></figure><p>解决方案：修改docker容器主机中的通用脚本中的数据库链接端口（原本的数据库端口是写死的3306）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="language-bash">安装 vim</span></span><br><span class="line">apt-get install vim</span><br><span class="line">vim /data/stock/libs/common.py</span><br></pre></td></tr></table></figure><p>仍然不行，只能查看两个docker容器的ip地址了，然后配置mysql的地址访问</p><p>172.17.0.3-》stock，172.17.0.2-》mysql</p><p>所以要把上面的修改复原，将mysql的配置改回来。</p><p>然后通过修改容器的环境变量参数来最终修复问题。(只能修改docker的容器配置参数，在docker容器内修改不行)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="language-bash">宿主机内</span></span><br><span class="line">service docker stop</span><br><span class="line">vim /var/lib/docker/containers/a5629af557b237a035f32535766f569a3c5b0aad163fa2aff66809ef8a380969/config.v2.json</span><br><span class="line">service docker start</span><br><span class="line">docker container start a562</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="language-bash">容器内执行</span></span><br><span class="line">sh /data/stock/jobs/run_init.sh</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> amazon </tag>
            
            <tag> trojan </tag>
            
            <tag> docker </tag>
            
            <tag> 容器 </tag>
            
            <tag> stock </tag>
            
            <tag> python </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>amazon EC2 服务器安装trojan服务端</title>
      <link href="/2022/03/04/amazon-EC2-%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85trojan%E6%9C%8D%E5%8A%A1%E7%AB%AF/"/>
      <url>/2022/03/04/amazon-EC2-%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85trojan%E6%9C%8D%E5%8A%A1%E7%AB%AF/</url>
      
        <content type="html"><![CDATA[<h3 id="amazon-aws-EC2-服务器快速安装Trojan服务端"><a href="#amazon-aws-EC2-服务器快速安装Trojan服务端" class="headerlink" title="amazon aws EC2 服务器快速安装Trojan服务端"></a><strong>amazon aws EC2 服务器快速安装Trojan服务端</strong></h3><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ol><li><p>配置域名，指向aws服务器的ip。</p><p>我使用的是cloudflare的dns服务，添加一条A记录直接指向ec2的动态ip。注意：这里一定不要开启cf的dns代理（proxy）功能，否者后续的脚本申请SSL证书时会一直失败。</p><p><img src="https://cdn.jsdelivr.net/gh/walkingsky/pic@main/blog/image-20220304223019526.png" alt="image-20220304223019526"></p></li><li><p>ec2服务器配置一条安全规则，开启TCP的443端口的外部访问。</p><p><img src="https://cdn.jsdelivr.net/gh/walkingsky/pic@main/blog/image-20220304225205360.png" alt="image-20220304225205360"></p></li><li><p>ssh 链接到ec2服务器，这个是基本操作了，不管做啥都要做这个操作的。</p></li></ol><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><strong>执行一键安装脚本</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source &lt;(curl -sL https://git.io/trojan-install)</span><br></pre></td></tr></table></figure><p>当以上命令执行完毕会安装Trojan管理程序，然后选择安装SSL证书的方式并绑定域名，我们选择“1.Let’s Encrypt 证书”，然后输入域名，如“app.mydomain.com”。申请证书这个过程比较容易出问题，注意向导的错误提示，以及安装成功后，通过查看执行记录来定位问题。</p><p>安装过程中还会有一个安装mysql数据库的过程，一般选择第一项，自动安装docker版的mariadb就可以了。</p><p><strong>安装后的测试</strong></p><ul><li><p>通过命令行下的管理界面查看启动log，如果没有一直范围重启或其他错误提示，基本上就是OK了。</p><p><img src="https://cdn.jsdelivr.net/gh/walkingsky/pic@main/blog/image-20220304224642828.png" alt="image-20220304224642828"></p></li><li><p>访问<a href="https://app.yourdomain.com,443端口的web界面进行用户管理及其他项的管理/">https://app.yourdomain.com，443端口的web界面进行用户管理及其他项的管理</a></p><p><img src="https://cdn.jsdelivr.net/gh/walkingsky/pic@main/blog/image-20220304225337285.png" alt="image-20220304225337285"></p><h3 id="配置客户端"><a href="#配置客户端" class="headerlink" title="配置客户端"></a>配置客户端</h3><p>将配置端生成的对应用户的trojan链接导入trojan客户端。</p><p><img src="https://cdn.jsdelivr.net/gh/walkingsky/pic@main/blog/image-20220304225652544.png" alt="image-20220304225652544"></p><p><img src="https://cdn.jsdelivr.net/gh/walkingsky/pic@main/blog/image-20220304225745657.png" alt="image-20220304225745657"></p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> aws </tag>
            
            <tag> amazon </tag>
            
            <tag> Trojan </tag>
            
            <tag> 服务端 </tag>
            
            <tag> 亚马逊 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>推荐一个自己用的云加速服务</title>
      <link href="/2022/03/03/%E6%8E%A8%E8%8D%90%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%94%A8%E7%9A%84%E4%BA%91%E5%8A%A0%E9%80%9F%E6%9C%8D%E5%8A%A1/"/>
      <url>/2022/03/03/%E6%8E%A8%E8%8D%90%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%94%A8%E7%9A%84%E4%BA%91%E5%8A%A0%E9%80%9F%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p>​        由于经常需要通过google搜索技术资料、解决技术问题，所以如何流畅的使用google搜索服务，成了一个必要的需求。由于众所周知的原因，国内通常无法</p><p>正常访问google，以及谷歌的其他一些服务。所以当时做了很多尝试：包括使用google的蓝灯软件，使用网络搜索到的公用的“机场”，自己在vutlr、搬瓦工购买最便宜的vps手动搭建服务，但都不尽人意。蓝灯的免费可用流量太少，根本不够用，而且一定需要一个客户端，使用起来很不方便；vutlr、搬瓦工价格并不便宜，而且需要一定的技术能力。</p><p>​        总结下来，使用时间最长、最稳定的基本上就是shadowsocks的服务了。省心，支持的协议很多，而且服务器的网点很多，最终要的是方便。配合一个刷过openwrt的极路由极1s，做为旁路路由使用，基本上自己网络里的pc、手机、pad都能快速访问谷歌和youtube。很是方便。</p><p>​        <a href="https://portal.shadowsocks.nz/aff.php?aff=15851">shadowsocks</a>的基本介绍：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">云加速服务 - Lite</span><br><span class="line"></span><br><span class="line">单用户 / 2 同时在线设备</span><br><span class="line"></span><br><span class="line">多个节点位于：</span><br><span class="line"></span><br><span class="line">香港、日本、美国、欧洲和澳大利亚</span><br><span class="line"></span><br><span class="line">支持所有操作系统</span><br><span class="line"></span><br><span class="line">支持 IPv4 和 IPv6 双栈网络</span><br><span class="line"></span><br><span class="line">一流的安全性和加密</span><br><span class="line"></span><br><span class="line">每月 100GB+ 流量</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">云加速服务 - Pro</span><br><span class="line"></span><br><span class="line">单用户 / 5 同时在线设备</span><br><span class="line"></span><br><span class="line">国际专线 IPLC Access</span><br><span class="line"></span><br><span class="line">额外多个节点位于：</span><br><span class="line"></span><br><span class="line">香港、日本、美国、欧洲和澳大利亚*</span><br><span class="line"></span><br><span class="line">支持所有操作系统</span><br><span class="line"></span><br><span class="line">支持 IPv4 和 IPv6 双栈网络</span><br><span class="line"></span><br><span class="line">一流的安全性和加密</span><br><span class="line"></span><br><span class="line">每月 100GB+ 流量</span><br></pre></td></tr></table></figure><p>openwrt上的服务器节点配置（只是配置了常用的几个，其他很多其他地区的节点根本用不过来）</p><p><img src="https://cdn.jsdelivr.net/gh/walkingsky/pic@main/blog/image-20220303150926533.png" alt="image-20220303150926533"></p><p><a href="https://portal.shadowsocks.nz/aff.php?aff=15851">进入shadowsocks官网购买</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> shadowsocks </tag>
            
            <tag> 云加速 </tag>
            
            <tag> trojan </tag>
            
            <tag> Shadowrocket </tag>
            
            <tag> openwrt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>静态博客网站工具</title>
      <link href="/2022/02/14/%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E5%B7%A5%E5%85%B7/"/>
      <url>/2022/02/14/%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h4 id="记录最近刚刚使用、接触过的几个markdown文档转静态网页（网站）的工具。"><a href="#记录最近刚刚使用、接触过的几个markdown文档转静态网页（网站）的工具。" class="headerlink" title="记录最近刚刚使用、接触过的几个markdown文档转静态网页（网站）的工具。"></a><strong>记录最近刚刚使用、接触过的几个markdown文档转静态网页（网站）的工具。</strong></h4><p>也记录了一些遇到过的问题。</p><p>[TOC]</p><hr><h4 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h4><p>官方主页：<a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a></p><p>基于nodejs，部分主题对nodejs版本要求比较高，安装包升级包容易出现兼容性问题；</p><p><u><strong>最大的问题就是编译速度太慢了</strong></u>。超过1W的文件量，windows底下就直接报“too many open files”错误，在linux下编译也是小时级别的，无法忍受。</p><p>找到的合适的主题：<a href="https://github.com/blinkfox/hexo-theme-matery">https://github.com/blinkfox/hexo-theme-matery</a></p><p>本地实施目录： F:\study\js\hexo_html  临时对比目录 F:\study\js\hexo2htm<strong>l</strong></p><p><strong>关于配置文件</strong></p><p>根目录的配置文件和主题目录的配置文件一同生效，并且如果有相同配置，是以主题目录的配置为主的。这点试了好多次才发现的规律</p><p><strong>遇到的问题</strong>：文件明太长，git无法cp文件，（windows文件名有255的长度限制）</p><p>报错信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unable to stat “xxxxxxxxxxxxxxxxxxx/index.html” Filename too long</span><br></pre></td></tr></table></figure><p>解决方法：<a href="https://confluence.atlassian.com/bamkb/git-checkouts-fail-on-windows-with-filename-too-long-error-unable-to-create-file-errors-867363792.html">https://confluence.atlassian.com/bamkb/git-checkouts-fail-on-windows-with-filename-too-long-error-unable-to-create-file-errors-867363792.html</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --system core.longpaths true</span><br><span class="line">git config --global core.longpaths true</span><br></pre></td></tr></table></figure><h4 id="hugo"><a href="#hugo" class="headerlink" title="hugo"></a>hugo</h4><p>官网文档：<a href="https://gohugo.io/getting-started/quick-start/">https://gohugo.io/getting-started/quick-start/</a></p><p>合适的主题：<a href="https://themes.gohugo.io/themes/parsa-hugo/">https://themes.gohugo.io/themes/parsa-hugo/</a></p><p>​            ：文档：<a href="https://docs.gethugothemes.com/parsa/?ref=github">https://docs.gethugothemes.com/parsa/?ref=github</a></p><ul><li>另一个参考的主题：<a href="https://themes.gohugo.io/themes/hugo-theme-dream/">https://themes.gohugo.io/themes/hugo-theme-dream/</a> （问题多，而且demo和文档都无法查到了）</li></ul><p>本地实施并修改的目录：</p><p>cloudflare上部署的时候遇到版本太低的问题，用环境变量来指定版本。官方文档说明如下</p><ul><li><pre><code>Hugo builds automatically run an old version. To run the latest version of Hugo (for example, `0.80.0`), you will need to set an environment variable. Set `HUGO_VERSION` to `0.80.0` or the Hugo version of your choice.</code></pre></li></ul><hr><p>更高阶的静态网站生成器</p><h4 id="gatsby"><a href="#gatsby" class="headerlink" title="gatsby"></a><strong>gatsby</strong></h4><p>Gatsby 是一个为 React 打造的快如闪电的现代化站点生成器</p><p>官网：<a href="https://www.gatsbyjs.com/how-it-works/">https://www.gatsbyjs.com/how-it-works/</a></p><p>中文网站：<a href="https://www.gatsbyjs.cn/docs/">https://www.gatsbyjs.cn/docs/</a></p><h4 id="gridsome"><a href="#gridsome" class="headerlink" title="gridsome"></a><strong>gridsome</strong></h4><p>基于 Vue.js 构建的 Jamstack 框架<br>Gridsome 让开发人员可以轻松地构建静态生成的网站和应用程序，这些网站和应用程序 天生速度快</p><p>官网：<a href="https://gridsome.org/">https://gridsome.org/</a></p><p>中文网站：<a href="https://www.gridsome.cn/">https://www.gridsome.cn/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 静态网站 </tag>
            
            <tag> hexo </tag>
            
            <tag> hugo </tag>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nodejs升级</title>
      <link href="/2022/02/10/nodejs%E5%8D%87%E7%BA%A7/"/>
      <url>/2022/02/10/nodejs%E5%8D%87%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[<h4 id="windows下的升级"><a href="#windows下的升级" class="headerlink" title="windows下的升级"></a>windows下的升级</h4><p><strong>n模块不支持windows平台，所以一般的升级方法是直接到nodejs官网下载对应的版本进行安装</strong></p><h4 id="Linux平台下的升级"><a href="#Linux平台下的升级" class="headerlink" title="Linux平台下的升级"></a>Linux平台下的升级</h4><p><strong>更新升级node版本的方法如下：</strong></p><p>1）首先：查看当前node版本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node –v</span><br></pre></td></tr></table></figure><p>2）安装n模块：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g n</span><br></pre></td></tr></table></figure><p>3）升级到指定版本/最新版本（该步骤可能需要花费一些时间）升级之前，可以执行n ls （查看可升级的版本）<br>如：<code>n v6.9.1</code></p><p>或者你也可以告诉管理器，安装最新的稳定版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n stable</span><br></pre></td></tr></table></figure><p>或者升级到最新版</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n latest</span><br></pre></td></tr></table></figure><p>4）安装完成后，查看Node的版本，检查升级是否成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><p>注：如果得到的版本信息不正确，你可能需要重启机器</p>]]></content>
      
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> npm </tag>
            
            <tag> 升级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>技术回收站-遇到过的一些技术资料的积累</title>
      <link href="/2022/02/09/%E6%8A%80%E6%9C%AF%E5%9B%9E%E6%94%B6%E7%AB%99/"/>
      <url>/2022/02/09/%E6%8A%80%E6%9C%AF%E5%9B%9E%E6%94%B6%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><ol><li>webhook 是啥？？</li><li>PHP 闭包函数</li><li>laravel的配置，可以动态使用吗？ </li><li>npm 命令使用 ，yarn 命令使用</li></ol><h4 id="经验"><a href="#经验" class="headerlink" title="经验"></a>经验</h4><ul><li><h6 id="PHP中的PSR规范-https-www-jianshu-com-p-b33155c15343"><a href="#PHP中的PSR规范-https-www-jianshu-com-p-b33155c15343" class="headerlink" title="PHP中的PSR规范 https://www.jianshu.com/p/b33155c15343"></a>PHP中的PSR规范 <a href="https://www.jianshu.com/p/b33155c15343">https://www.jianshu.com/p/b33155c15343</a></h6></li><li><p>centos7 8 ，的firewall-cmd 命令配置防火墙。 详细介绍文档 <a href="https://wangchujiang.com/linux-command/c/firewall-cmd.html">https://wangchujiang.com/linux-command/c/firewall-cmd.html</a>  <a href="https://www.cnblogs.com/Raodi/p/11625487.html">https://www.cnblogs.com/Raodi/p/11625487.html</a></p></li><li><p>四种解决Nginx出现403 forbidden 报错的方法 <a href="https://www.linuxprobe.com/nginx-403-forbidden.html">https://www.linuxprobe.com/nginx-403-forbidden.html</a></p></li><li><p>linux 创建虚拟内存文件 swapfile 加大内存 <a href="https://blog.csdn.net/liuwei000000/article/details/68953091">https://blog.csdn.net/liuwei000000/article/details/68953091</a></p></li><li><p>php curl 出现<code>cURL error 60: SSL certificate problem: unable to get local issuer certificate (see https://curl.haxx.se/libcurl/c/libcurl-errors.html)</code>报错的处理方式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">查询问题：SSL CA证书配置缺失导致。</span><br><span class="line"></span><br><span class="line">1、从CURL 官网下载CA 证书（cacert.pem）</span><br><span class="line"></span><br><span class="line">　　可 选择下载：https://curl.haxx.se/docs/caextract.html</span><br><span class="line"></span><br><span class="line">　　或 直接下载：https://curl.haxx.se/ca/cacert.pem</span><br><span class="line"></span><br><span class="line">2、找到 phpstudy 安装路径，对应php版本包</span><br><span class="line"></span><br><span class="line">　　例 安装路径下 php包：F:\phpstudy_pro\Extensions\php\php7.3.4nts\</span><br><span class="line"></span><br><span class="line">　　将下载的cacert.pem文件，放入 \extras\ssl\ 文件夹下</span><br><span class="line"></span><br><span class="line">3、修改配置 php.ini 文件</span><br><span class="line"></span><br><span class="line">　　启用openssl, curl扩展</span><br><span class="line"></span><br><span class="line">extension=curl</span><br><span class="line">extension=openssl</span><br><span class="line">　　配置CA 证书存放位置</span><br></pre></td></tr></table></figure></li><li><p>frps 内网穿透 <a href="https://post.smzdm.com/p/566063/">https://post.smzdm.com/p/566063/</a></p></li><li><p>mysql 安装后从新初始化密码 <a href="https://www.cnblogs.com/williamjie/p/11126486.html">https://www.cnblogs.com/williamjie/p/11126486.html</a></p></li><li><p>深入剖析 Laravel 服务提供者实现原理 <a href="https://learnku.com/articles/12986/in-depth-analysis-of-the-principle-of-laravel-service-provider-implementation">https://learnku.com/articles/12986/in-depth-analysis-of-the-principle-of-laravel-service-provider-implementation</a></p></li><li><p>微信小程序工具集（偏前端） <a href="https://github.com/justjavac/awesome-wechat-weapp">https://github.com/justjavac/awesome-wechat-weapp</a></p></li><li><p>phpstrom 的激活码 <a href="https://gist.github.com/imgVOID/57d05edbc09a2d0416879cbd44d52c02">https://gist.github.com/imgVOID/57d05edbc09a2d0416879cbd44d52c02</a></p></li><li><p>laravel make 生成时可以指定路径。 比如 <code>php artisan make:model Models/Log/DecryptLog</code>  <code> php artisan make:controller Api/DecryptLogController</code></p></li><li><p>接口类（<strong>interface</strong> - <strong>implements</strong> ），抽象类（<strong>abstract</strong>）、<strong>trait</strong> 的定义</p></li><li><p><strong>web-worker</strong> js的多线程实现</p></li><li><p>在线知识管理系统 <a href="https://zhuanlan.zhihu.com/p/134127874">https://zhuanlan.zhihu.com/p/134127874</a> </p></li><li><p>前端跨域详细讲解 <a href="https://segmentfault.com/a/1190000012469713">https://segmentfault.com/a/1190000012469713</a></p></li><li><p>laravel+vue项目前后端分离CSRF_TOKEN设置  <a href="https://www.codenong.com/cs106247005/">https://www.codenong.com/cs106247005/</a></p></li><li><p>东方财富的基金数据获取接口 <a href="https://fundmobapi.eastmoney.com/FundMNewApi/FundMNFInfo?pageIndex=1&amp;pageSize=500&amp;appType=ttjj&amp;plat=Android&amp;product=EFund&amp;Version=1&amp;deviceid=4252d0ac69bb50&amp;Fcodes=006751,006752">https://fundmobapi.eastmoney.com/FundMNewApi/FundMNFInfo?pageIndex=1&amp;pageSize=500&amp;appType=ttjj&amp;plat=Android&amp;product=EFund&amp;Version=1&amp;deviceid=4252d0ac69bb50&amp;Fcodes=006751,006752</a></p></li><li><p>东方财富基金历史数据获取接口 <a href="http://fund.eastmoney.com/f10/F10DataApi.aspx?type=lsjz&amp;code=005176&amp;page=1&amp;per=49">http://fund.eastmoney.com/f10/F10DataApi.aspx?type=lsjz&amp;code=005176&amp;page=1&amp;per=49</a></p></li><li><p>ssh 建立mysql的隧道   ssh -i /D/work/id_dsa_1024 -2 -x -N -L 13306:10.0.232.165:3306 <a href="mailto:&#x74;&#x61;&#x6e;&#x67;&#120;&#117;&#110;&#105;&#x6e;&#x67;&#64;&#x34;&#x37;&#46;&#x39;&#x39;&#46;&#x31;&#57;&#54;&#x2e;&#49;&#56;&#x35;">&#x74;&#x61;&#x6e;&#x67;&#120;&#117;&#110;&#105;&#x6e;&#x67;&#64;&#x34;&#x37;&#46;&#x39;&#x39;&#46;&#x31;&#57;&#54;&#x2e;&#49;&#56;&#x35;</a></p></li><li><p>markdown 生成html 静态页面  <a href="https://www.wanghuiblog.com/post/static-webiste-generator/">https://www.wanghuiblog.com/post/static-webiste-generator/</a></p></li><li><p>Hoverfly  服务虚拟化工具 ，可以用来做复杂的api接口测试</p></li><li><p>df datafame 数据合并拼接 <a href="https://blog.csdn.net/qq_41853758/article/details/83280104">https://blog.csdn.net/qq_41853758/article/details/83280104</a></p></li><li><p>cloudflare 功能强大的dns网站，可以做pages，web-worker，以及域名ssl加密的免费服务</p></li><li></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> webhook </tag>
            
            <tag> 闭包函数 </tag>
            
            <tag> laravel </tag>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux斐讯</title>
      <link href="/2022/02/09/%E6%96%90%E8%AE%AFN1%20%E7%9B%92%E5%AD%90%EF%BC%8Carmbian%20linux%20%E9%93%BE%E6%8E%A5%E8%93%9D%E7%89%99/"/>
      <url>/2022/02/09/%E6%96%90%E8%AE%AFN1%20%E7%9B%92%E5%AD%90%EF%BC%8Carmbian%20linux%20%E9%93%BE%E6%8E%A5%E8%93%9D%E7%89%99/</url>
      
        <content type="html"><![CDATA[<h5 id="斐讯N1-盒子，armbian-linux-链接蓝牙"><a href="#斐讯N1-盒子，armbian-linux-链接蓝牙" class="headerlink" title="斐讯N1 盒子，armbian linux 链接蓝牙"></a>斐讯N1 盒子，armbian linux 链接蓝牙</h5><p>耳机的地址：A8:4D:4A:FE:XX:XX</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">7. 运行sudo armbian-config，设置时区，配置连接wifi网络。完成后退出armbian-config，然后按照MaxGo的教程修改apt源为国内源，https://www.right.com.cn/forum/thread-342558-1-1.html 修改国内源完成后，分别执行sudo update和sudo upgrade更新系统。更新完毕后sudo reboot重启。</span><br><span class="line"></span><br><span class="line">8. 重启后，继续ssh连接，然后执行sudo armbian-config，进去后选择Network，接着选择BT Install，耐心等待蓝牙组件安装完毕，然后退出。</span><br><span class="line"></span><br><span class="line">9. 接着执行sudo apt install pulseaudio-module-bluetooth 安装pulseaudio组件。安装完成后，分别执行sudo killall pulseaudio和pulseaudio --start启动pulseaudio服务。</span><br><span class="line"></span><br><span class="line">10. 开始进入蓝牙连接阶段，首先执行sudo hciconfig -a查看蓝牙控制器信息，确认无误后，执行sudo hciconfig hci0 up打开蓝牙控制器，然后执行sudo bluetoothctl打开蓝牙管理器。</span><br><span class="line"></span><br><span class="line">11. 先后执行power on，discoverable on，agent on，然后执行scan on搜集周围的蓝牙设备，记录下要连接的设备地址后，执行trust &lt;设备地址&gt;信任设备，然后再执行pair &lt;设备地址&gt;配对，此时，要配对的设备上可能会弹出提示，点确认。</span><br><span class="line"></span><br><span class="line">12. 如以上步骤都没有问题，则执行connect &lt;设备地址&gt;，稍候即可顺利连接蓝牙，可以运行info &lt;设备地址&gt;确认状态。</span><br></pre></td></tr></table></figure><p>不成功。连上之后又自动断开，找不到对应的声卡设备</p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 斐讯N1 </tag>
            
            <tag> 蓝牙 </tag>
            
            <tag> 盒子 </tag>
            
            <tag> 命令 </tag>
            
            <tag> armbian </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
